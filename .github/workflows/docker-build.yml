name: Build and Push Multi-Platform Docker Image

on:
  push:
    branches: [ "main" ]  # Push to main = latest tag (linux/amd64 + linux/arm64)
    tags: [ "v*" ]       # Version tags = versioned releases (linux/amd64 + linux/arm64)
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/oc-proxy-downloader

jobs:
  # 공통 메타데이터 생성
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          DATE=$(date +'%Y.%m.%d')
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="${DATE}-${SHORT_SHA}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        echo "Generated version: ${VERSION}"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }},enable=${{ github.event_name != 'pull_request' }}
        flavor: |
          latest=auto

  # PR용 빠른 AMD64 빌드
  build-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (AMD64 only for PR)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ needs.prepare.outputs.tags }}
        labels: ${{ needs.prepare.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ needs.prepare.outputs.version }}

  # AMD64 우선 빌드 (latest 태그 먼저 사용 가능)
  build-amd64-priority:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push AMD64 image with latest tag
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ needs.prepare.outputs.tags }}
        labels: ${{ needs.prepare.outputs.labels }}
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-amd64
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-amd64,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ needs.prepare.outputs.version }}

    - name: AMD64 build completed notification
      run: |
        echo "🚀 AMD64 Build Completed!"
        echo "========================"
        echo "✅ AMD64 image pushed with tags:"
        echo "${{ needs.prepare.outputs.tags }}" | sed 's/^/  - /'
        echo ""
        echo "🐳 Users can now pull and use:"
        echo "  docker pull ${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "⚡ ARM64 build is continuing in background for multi-platform support"
        echo "========================"

  # ARM64 백그라운드 빌드 (AMD64 완료 후)
  build-arm64-background:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [prepare, build-amd64-priority]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build ARM64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}-arm64
        labels: ${{ needs.prepare.outputs.labels }}
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-arm64
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-arm64,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ needs.prepare.outputs.version }}

    - name: Create multi-platform manifest
      run: |
        # 멀티플랫폼 매니페스트 생성
        echo "Creating multi-platform manifest..."
        
        # 각 태그에 대해 매니페스트 업데이트
        echo "${{ needs.prepare.outputs.tags }}" | while IFS= read -r tag; do
          if [[ ! -z "$tag" && "$tag" != "null" ]]; then
            echo "Updating manifest for: $tag"
            docker buildx imagetools create \
              --tag "$tag" \
              "$tag" \
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}-arm64"
            echo "✅ Multi-platform manifest updated: $tag"
          fi
        done

    - name: Final build summary
      run: |
        echo "🐳 Multi-Platform Build Complete!"
        echo "================================="
        echo "✅ AMD64 build: Completed first (users could use immediately)"
        echo "✅ ARM64 build: Completed" 
        echo "✅ Multi-platform manifest: Updated"
        echo "Version: ${{ needs.prepare.outputs.version }}"
        echo "Is Release: ${{ needs.prepare.outputs.is_release }}"
        echo ""
        echo "Final tags available:"
        echo "${{ needs.prepare.outputs.tags }}" | sed 's/^/  - /'
        echo ""
        echo "🚀 Strategy: AMD64 available in ~8min, Multi-platform in ~16min"
        echo "================================="